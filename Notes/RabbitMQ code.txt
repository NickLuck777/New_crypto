üìå –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –≤ RabbitMQ —Å –ø–æ–º–æ—â—å—é pika?
üî• pika ‚Äì —ç—Ç–æ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RabbitMQ (–æ—á–µ—Ä–µ–¥—è–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π).

üöÄ 1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ pika

pip install pika

üîπ 2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ RabbitMQ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
üìå –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å task_queue –≤ RabbitMQ

import pika

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ

connection = pika.BlockingConnection(pika.ConnectionParameters("localhost"))
channel = connection.channel()

# –°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç, –æ–Ω–∞ —Å–æ–∑–¥–∞—Å—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
channel.queue_declare(queue="task_queue")

print("–û—á–µ—Ä–µ–¥—å 'task_queue' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

# –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
connection.close()

‚úÖ –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RabbitMQ (localhost ‚Äì –µ—Å–ª–∏ RabbitMQ –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ)
–°–æ–∑–¥–∞—ë—Ç –æ—á–µ—Ä–µ–¥—å task_queue
–ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è

üîπ 3. –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å? (Producer)
üìå Producer ‚Äì –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å

import pika

connection = pika.BlockingConnection(pika.ConnectionParameters("localhost"))
channel = connection.channel()

# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
channel.queue_declare(queue="task_queue")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
channel.basic_publish(exchange="", routing_key="task_queue", body="Hello, RabbitMQ!")

print(" [x] Sent 'Hello, RabbitMQ!'")
connection.close()

‚úÖ –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?

–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ RabbitMQ
–°–æ–∑–¥–∞—ë–º –æ—á–µ—Ä–µ–¥—å (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "Hello, RabbitMQ!"

üîπ 4. –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏? (Consumer)
üìå Consumer ‚Äì –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏

import pika

connection = pika.BlockingConnection(pika.ConnectionParameters("localhost"))
channel = connection.channel()

# –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—á–µ—Ä–µ–¥—å
channel.queue_declare(queue="task_queue")

def callback(ch, method, properties, body):
    print(f" [x] Received {body.decode()}")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
channel.basic_consume(queue="task_queue", on_message_callback=callback, auto_ack=True)

print(" [*] Waiting for messages. To exit press CTRL+C")
channel.start_consuming()

‚úÖ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?

–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RabbitMQ
–ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ task_queue
–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ

üìå –ò—Ç–æ–≥
üî• –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ RabbitMQ!
‚úÖ Producer (basic_publish) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å
‚úÖ Consumer (basic_consume) –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏

üìå –¢–µ–ø–µ—Ä—å –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —á–µ—Ä–µ–∑ pika? üöÄ