üìå –ü—Ä–æ–µ–∫—Ç: ETL-–ø–∞–π–ø–ª–∞–π–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
üíº –£—Ä–æ–≤–µ–Ω—å: Middle Data Engineer
üìÜ –°—Ä–æ–∫: 8-12 –Ω–µ–¥–µ–ª—å (–µ—Å–ª–∏ —É—á–∏—à—å—Å—è)
üéØ –¶–µ–ª—å: –°–æ–±—Ä–∞—Ç—å, –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –≤ DWH, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã.

üîπ 1. –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚è≥ –°—Ä–æ–∫: 1 –Ω–µ–¥–µ–ª—è

‚úÖ –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–∞–π–ø–ª–∞–π–Ω–∞:

–ò—Å—Ç–æ—á–Ω–∏–∫–∏: API –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂, –±–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã–µ, –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Å–∞–π—Ç—ã, Twitter (X)
–û–±—Ä–∞–±–æ—Ç–∫–∞: PySpark, Pandas, Kafka
–•—Ä–∞–Ω–∏–ª–∏—â–∞: ClickHouse (DWH), PostgreSQL, MongoDB, Redis
–û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è: Apache Airflow
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Grafana, Prometheus
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—Ç—å:

–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ü–µ–Ω—ã, –æ–±—ä–µ–º—ã, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
–ë–ª–æ–∫—á–µ–π–Ω-–¥–∞–Ω–Ω—ã–µ: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ–±—ä–µ–º—ã –≤ —Å–µ—Ç–∏, –∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (whales)
–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: –Ω–æ–≤–æ—Å—Ç–∏, —Ç—Ä–µ–Ω–¥—ã –≤ Twitter (X)
‚úÖ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –ø–∞–π–ø–ª–∞–π–Ω–∞:

Batch: –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
Near real-time: –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Kafka
üîπ 2. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (Extract)
‚è≥ –°—Ä–æ–∫: 2-3 –Ω–µ–¥–µ–ª–∏

2.1. –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂ (API)
‚úÖ –ë–∏—Ä–∂–∏: Binance, Coinbase, Kraken, Bybit
‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: —Ü–µ–Ω–∞, –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤, –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, —Å—Ç–∞–∫–∞–Ω –æ—Ä–¥–µ—Ä–æ–≤
‚úÖ –§–æ—Ä–º–∞—Ç: JSON, REST API

–ü—Ä–∏–º–µ—Ä API-–∑–∞–ø—Ä–æ—Å–∞:

python

import requests
response = requests.get("https://api.binance.com/api/v3/ticker/24hr?symbol=BTCUSDT")
print(response.json())

2.2. –î–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞ (API, WebSocket, RPC)
‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Ethereum (Infura), Bitcoin (Blockstream API), Solana (Solana RPC)
‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –æ–±—ä–µ–º, –∫—Ä—É–ø–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã (whales), Gas Fees
‚úÖ –§–æ—Ä–º–∞—Ç: JSON, WebSocket, Parquet

–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ Ethereum RPC:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import requests
payload = {"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}
response = requests.post("https://mainnet.infura.io/v3/YOUR_API_KEY", json=payload)
print(response.json())

2.3. –ù–æ–≤–æ—Å—Ç–Ω—ã–µ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (Twitter, RSS, Telegram)
‚úÖ Twitter API (X) ‚Äì –∞–Ω–∞–ª–∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π BTC, ETH, SOL
‚úÖ RSS-–ª–µ–Ω—Ç—ã ‚Äì –Ω–æ–≤–æ—Å—Ç–∏ Cointelegraph, Coindesk
‚úÖ Telegram ‚Äì –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤ –∫—Ä–∏–ø—Ç–æ-–≥—Ä—É–ø–ø–∞—Ö

üîπ 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (Transform)
‚è≥ –°—Ä–æ–∫: 3-4 –Ω–µ–¥–µ–ª–∏

‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö:

–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
–ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∫ UTC
–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚úÖ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:

–ü–æ–¥—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ (—Ä–æ—Å—Ç/–ø–∞–¥–µ–Ω–∏–µ)
–ê–Ω–∞–ª–∏–∑ "—É–º–Ω—ã—Ö –¥–µ–Ω–µ–≥" ‚Äì –∫–æ–≥–¥–∞ –∫—Ä—É–ø–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ —Å–ª–∏–≤–∞—é—Ç –∏–ª–∏ –ø–æ–∫—É–ø–∞—é—Ç
‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏–∏:

–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –º–∏–Ω—É—Ç–∞–º / —á–∞—Å–∞–º / –¥–Ω—è–º
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º
–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –¥–≤–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
–ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ PySpark:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from pyspark.sql import functions as F

df = df.withColumn("volatility", (F.col("high") - F.col("low")) / F.col("open"))

üîπ 4. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (Load)
‚è≥ –°—Ä–æ–∫: 2-3 –Ω–µ–¥–µ–ª–∏

4.1. DWH (ClickHouse) ‚Äì –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –≤–∏—Ç—Ä–∏–Ω–∞
‚úÖ –•—Ä–∞–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –º–∏–Ω—É—Ç–∞–º, —á–∞—Å–∞–º, –¥–Ω—è–º
‚úÖ –ó–∞–¥–∞—á–∏:

–•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω
–¢—Ä–µ–Ω–¥—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º

sql

CREATE TABLE crypto_prices (
    timestamp DateTime,
    symbol String,
    price Float64,
    volume Float64
) ENGINE = MergeTree()
ORDER BY timestamp;

4.2. PostgreSQL ‚Äì –î–∞–Ω–Ω—ã–µ –¥–ª—è BI
‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤, —Ç—Ä–µ–π–¥–µ—Ä–æ–≤

sql

CREATE TABLE top_traders (
    trader_id SERIAL PRIMARY KEY,
    address VARCHAR(100),
    total_volume NUMERIC(18,2)
);

4.3. MongoDB ‚Äì –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ –Ω–æ–≤–æ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON-—Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç–µ–π

json

{
    "source": "Twitter",
    "text": "Bitcoin is pumping!",
    "sentiment": "positive",
    "timestamp": "2024-02-12T10:00:00Z"
}
4.4. Redis ‚Äì –ö–µ—à –±—ã—Å—Ç—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚úÖ –•—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

bash

SET BTCUSDT 47200
SET ETHUSDT 3300

üîπ 5. –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è (Apache Airflow)
‚è≥ –°—Ä–æ–∫: 1-2 –Ω–µ–¥–µ–ª–∏

‚úÖ DAGs:

extract_market_data.py (API –±–∏—Ä–∂)
extract_blockchain_data.py (Ethereum, Bitcoin)
process_data.py (Spark, Pandas)
load_to_dwh.py (ClickHouse, PostgreSQL)

python

from airflow import DAG
from airflow.operators.python_operator import PythonOperator

dag = DAG('crypto_etl', schedule_interval='*/10 * * * *')

extract_task = PythonOperator(
    task_id='extract_data',
    python_callable=extract_market_data,
    dag=dag
)
üîπ 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã (Grafana, Prometheus, Telegram)
‚è≥ –°—Ä–æ–∫: 1-2 –Ω–µ–¥–µ–ª–∏

‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –≤ Grafana:

–¶–µ–Ω–∞ BTC, ETH, SOL
–û–±—ä–µ–º—ã —Ç–æ—Ä–≥–æ–≤
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤

‚úÖ –ê–ª–µ—Ä—Ç—ã:

–ï—Å–ª–∏ —Ü–µ–Ω–∞ BTC –ø–∞–¥–∞–µ—Ç –Ω–∞ 5% –∑–∞ —á–∞—Å ‚Üí Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
–ï—Å–ª–∏ –≤ —Å–µ—Ç–∏ Ethereum —Ä–∞—Å—Ç–µ—Ç Gas Fee ‚Üí email-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ

üîπ 7. –î–µ–ø–ª–æ–π –≤ Yandex Cloud
‚è≥ –°—Ä–æ–∫: 2 –Ω–µ–¥–µ–ª–∏

‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏—è (Docker)
‚úÖ –î–µ–ø–ª–æ–π –≤ Yandex Cloud
‚úÖ CI/CD –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

üìå –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
‚úÖ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π ETL-–ø–∞–π–ø–ª–∞–π–Ω, –∫–æ—Ç–æ—Ä—ã–π:

–°–æ–±–∏—Ä–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ, –±–ª–æ–∫—á–µ–π–Ω –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Ö —Å –ø–æ–º–æ—â—å—é Spark, Pandas
–•—Ä–∞–Ω–∏—Ç –≤ ClickHouse, PostgreSQL, MongoDB, Redis
–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –º–µ—Ç—Ä–∏–∫–∏ –∏ —à–ª–µ—Ç –∞–ª–µ—Ä—Ç—ã

–≤—ã —Å–∫–∞–∑–∞–ª–∏:
—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ twitter, rss, telegram –±—É–¥—É—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø–∞–¥–∞—Ç—å –≤ –∫–∞—Ñ–∫—É, –ø–æ—Ç–æ–º—É —è –±—É–¥—É –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –≤ –ë–î?



ChatGPT —Å–∫–∞–∑–∞–ª:
–î–∞, —Ç—ã –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª! üìå

–î–∞–Ω–Ω—ã–µ –∏–∑ Twitter, RSS –∏ Telegram –≤–Ω–∞—á–∞–ª–µ –ø–æ—Ç–æ–∫–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ Kafka ‚Üí –∑–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è (–æ—á–∏—â–∞—é—Ç—Å—è, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è, –∞–≥—Ä–µ–≥–∏—Ä—É—é—Ç—Å—è) ‚Üí –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ ClickHouse, PostgreSQL –∏ Redis.

üìå –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ETL-–ø–∞–π–ø–ª–∞–π–Ω–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
üîÑ –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
1Ô∏è‚É£ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (Producers)

Twitter API ‚Üí Kafka
RSS-–Ω–æ–≤–æ—Å—Ç–∏ ‚Üí Kafka
Telegram ‚Üí Kafka

2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ (Consumers)

–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (Sentiment Analysis)
–í—ã–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤

3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (DWH, BI, –∫–µ—à)

ClickHouse ‚Üí –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ—Ü. –¥–∞–Ω–Ω—ã—Ö
PostgreSQL ‚Üí –¥–ª—è BI-–∞–Ω–∞–ª–∏–∑–∞
Redis ‚Üí –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º

4Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∞–ª–µ—Ä—Ç—ã

Grafana ‚Üí –¥–∞—à–±–æ—Ä–¥—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
Telegram-–±–æ—Ç ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

1Ô∏è‚É£ –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Twitter, RSS, Telegram –≤ Kafka?
üìå Kafka Producer –¥–ª—è Twitter
python

from kafka import KafkaProducer
import json
import tweepy

BEARER_TOKEN = "your_twitter_bearer_token"
producer = KafkaProducer(bootstrap_servers="localhost:9092", value_serializer=lambda v: json.dumps(v).encode("utf-8"))

def fetch_tweets():
    client = tweepy.Client(bearer_token=BEARER_TOKEN)
    query = "(BTC OR ETH OR SOL) -is:retweet"
    tweets = client.search_recent_tweets(query=query, max_results=10)
    
    for tweet in tweets.data:
        data = {"source": "Twitter", "text": tweet.text, "timestamp": tweet.created_at.isoformat()}
        producer.send("crypto_social", data)

fetch_tweets()
üìå Kafka Producer –¥–ª—è RSS (–Ω–æ–≤–æ—Å—Ç–∏)
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import feedparser
from kafka import KafkaProducer
import json

producer = KafkaProducer(bootstrap_servers="localhost:9092", value_serializer=lambda v: json.dumps(v).encode("utf-8"))
rss_feeds = ["https://cointelegraph.com/rss", "https://www.coindesk.com/arc/outboundfeeds/rss/"]

def fetch_rss():
    for feed_url in rss_feeds:
        feed = feedparser.parse(feed_url)
        for entry in feed.entries[:5]:
            data = {"source": "RSS", "title": entry.title, "link": entry.link, "timestamp": entry.published}
            producer.send("crypto_social", data)

fetch_rss()
üìå Kafka Producer –¥–ª—è Telegram
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from telethon.sync import TelegramClient
from kafka import KafkaProducer
import json

API_ID = "your_api_id"
API_HASH = "your_api_hash"
client = TelegramClient("crypto_parser", API_ID, API_HASH)
producer = KafkaProducer(bootstrap_servers="localhost:9092", value_serializer=lambda v: json.dumps(v).encode("utf-8"))

async def fetch_telegram():
    async for message in client.iter_messages("cryptosignalsgroup", limit=10):
        data = {"source": "Telegram", "text": message.text, "timestamp": message.date.isoformat()}
        producer.send("crypto_social", data)

with client:
    client.loop.run_until_complete(fetch_telegram())
2Ô∏è‚É£ –ö–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –≤ –ë–î?
Kafka Consumer –±–µ—Ä—ë—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Kafka-—Ç–æ–ø–∏–∫–∞, –æ—á–∏—â–∞–µ—Ç –∏—Ö –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞.

üìå Kafka Consumer + Sentiment Analysis
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from kafka import KafkaConsumer
from textblob import TextBlob
import json

consumer = KafkaConsumer("crypto_social", bootstrap_servers="localhost:9092", value_deserializer=lambda m: json.loads(m.decode("utf-8")))

for msg in consumer:
    data = msg.value
    sentiment = TextBlob(data["text"]).sentiment.polarity  # –û—Ç -1 (–Ω–µ–≥–∞—Ç–∏–≤) –¥–æ +1 (–ø–æ–∑–∏—Ç–∏–≤)
    data["sentiment"] = sentiment
    print(f"Processed: {data}")
3Ô∏è‚É£ –ö–∞–∫ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—ã?
–ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ ClickHouse, PostgreSQL, Redis.

üìå ClickHouse (DWH)
sql
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
CREATE TABLE crypto_news (
    source String,
    text String,
    sentiment Float32,
    timestamp DateTime
) ENGINE = MergeTree()
ORDER BY timestamp;
üìå Python-–∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ ClickHouse:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from clickhouse_driver import Client

client = Client("localhost")
client.execute("INSERT INTO crypto_news VALUES", [
    ("Twitter", "Bitcoin is pumping!", 0.9, "2024-02-12 10:00:00"),
    ("RSS", "BTC –≤—ã—Ä–æ—Å –Ω–∞ 10%", 0.8, "2024-02-12 11:00:00")
])
üìå PostgreSQL (–¥–ª—è BI-–∞–Ω–∞–ª–∏–∑–∞)
sql
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
CREATE TABLE crypto_trends (
    source VARCHAR(50),
    text TEXT,
    sentiment FLOAT,
    timestamp TIMESTAMP
);
üìå Python-–∫–æ–¥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ PostgreSQL:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import psycopg2

conn = psycopg2.connect("dbname=crypto user=admin password=admin")
cursor = conn.cursor()

cursor.execute("INSERT INTO crypto_trends (source, text, sentiment, timestamp) VALUES (%s, %s, %s, %s)", 
               ("Telegram", "ETH to the moon!", 0.95, "2024-02-12 12:00:00"))

conn.commit()
conn.close()
üìå Redis (–∫–µ—à –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤)
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
SET BTC_sentiment 0.85
SET ETH_sentiment 0.72
üìå Python-–∫–æ–¥ –¥–ª—è Redis:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import redis

r = redis.Redis(host="localhost", port=6379, db=0)
r.set("BTC_sentiment", 0.85)
r.set("ETH_sentiment", 0.72)
4Ô∏è‚É£ –ö–∞–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤ Grafana + Prometheus?
‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –≤ Prometheus –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
‚úÖ –ì—Ä–∞—Ñ–∏–∫–∏ –≤ Grafana:

–°—Ä–µ–¥–Ω–∏–π Sentiment Score –ø–æ BTC, ETH, SOL
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
üìå Prometheus-–º–µ—Ç—Ä–∏–∫–∏ (Python):

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from prometheus_client import start_http_server, Gauge

btc_sentiment = Gauge("btc_sentiment", "Sentiment score for BTC")
eth_sentiment = Gauge("eth_sentiment", "Sentiment score for ETH")

start_http_server(8000)

btc_sentiment.set(0.85)
eth_sentiment.set(0.72)
üìå Grafana Dashboard:

–ò—Å—Ç–æ—á–Ω–∏–∫: Prometheus
–ü–∞–Ω–µ–ª–∏: –õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ sentiment score –¥–ª—è BTC, ETH, SOL
üìå –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ö–µ–º–∞
1Ô∏è‚É£ Kafka Producers ‚Üí Twitter, RSS, Telegram –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ Kafka
2Ô∏è‚É£ Kafka Consumers ‚Üí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Ç–µ–∫—Å—Ç
3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—ã:

ClickHouse ‚Üí –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–æ—Ü. –¥–∞–Ω–Ω—ã—Ö
PostgreSQL ‚Üí BI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
Redis ‚Üí –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–µ–º
4Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ Grafana
5Ô∏è‚É£ –ê–ª–µ—Ä—Ç—ã –≤ Telegram

–æ–±—ä—è—Å–Ω–∏ –≤–æ—Ç —ç—Ç–æ : sentiment = TextBlob(data["text"]).sentiment.polarity  # –û—Ç -1 (–Ω–µ–≥–∞—Ç–∏–≤) –¥–æ +1 (–ø–æ–∑–∏—Ç–∏–≤)



ChatGPT —Å–∫–∞–∑–∞–ª:
–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç TextBlob –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏?
–í —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞:

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
sentiment = TextBlob(data["text"]).sentiment.polarity  # –û—Ç -1 (–Ω–µ–≥–∞—Ç–∏–≤) –¥–æ +1 (–ø–æ–∑–∏—Ç–∏–≤)
–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º TextBlob, –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (NLP), —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É —Ç–µ–∫—Å—Ç–∞.

üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥?
1Ô∏è‚É£ –°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç TextBlob –∏–∑ —Ç–µ–∫—Å—Ç–∞
2Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (polarity)
3Ô∏è‚É£ –ó–Ω–∞—á–µ–Ω–∏–µ polarity –≤–∞—Ä—å–∏—Ä—É–µ—Ç—Å—è –æ—Ç -1 –¥–æ +1:

-1 = —Å–∏–ª—å–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç ("Bitcoin —Ä—É—Ö–Ω—É–ª, –≤—Å—ë –ø—Ä–æ–ø–∞–ª–æ!")
0 = –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç ("–°–µ–≥–æ–¥–Ω—è BTC —Å—Ç–æ–∏—Ç $42,000")
+1 = —Å–∏–ª—å–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç ("Ethereum –≤–∑–ª–µ—Ç–µ–ª! –í—Å–µ –≤ –ø—Ä–∏–±—ã–ª–∏!")
üìå –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã TextBlob
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from textblob import TextBlob

text1 = "Bitcoin crashes! Investors lose millions!"
text2 = "Ethereum price remains stable today."
text3 = "Massive BTC pump! New all-time high!"

print(TextBlob(text1).sentiment.polarity)  # -0.75 (–Ω–µ–≥–∞—Ç–∏–≤)
print(TextBlob(text2).sentiment.polarity)  # 0.0 (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ)
print(TextBlob(text3).sentiment.polarity)  # 0.85 (–ø–æ–∑–∏—Ç–∏–≤)
üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–Ω–∞–ª–∏–∑–µ –∫—Ä–∏–ø—Ç–æ-—Ä—ã–Ω–∫–∞?
–ï—Å–ª–∏ polarity > 0.5 ‚Üí —Ä—ã–Ω–æ–∫ –Ω–∞ –ø–æ–∑–∏—Ç–∏–≤–µ, –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–æ—Å—Ç
–ï—Å–ª–∏ polarity < -0.5 ‚Üí –º–Ω–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–∞, –≤–æ–∑–º–æ–∂–µ–Ω –¥–∞–º–ø
–ï—Å–ª–∏ polarity –±–ª–∏–∑–∫–æ –∫ 0 ‚Üí –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
üí° –ú–æ–∂–Ω–æ —Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞ –∏ –¥–µ–ª–∞—Ç—å –∞–ª–µ—Ä—Ç—ã, –µ—Å–ª–∏ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑–∫–æ –º–µ–Ω—è–µ—Ç—Å—è! üöÄ

üìå –•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É, –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é AI-–º–æ–¥–µ–ª–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä BERT? üî•

–í—ã —Å–∫–∞–∑–∞–ª–∏:
–ø–æ–∫–∞–∂–∏





ChatGPT —Å–∫–∞–∑–∞–ª:
üîπ –£–ª—É—á—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é BERT
TextBlob —Ö–æ—Ä–æ—à –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞, –Ω–æ —É –Ω–µ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä–µ–π.
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤—ã–µ –º–æ–¥–µ–ª–∏ (BERT, RoBERTa, GPT) –ª—É—á—à–µ –ø–æ–Ω–∏–º–∞—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ª–æ–∂–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.

üìå –ß—Ç–æ –º—ã –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?
1Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–µ–º transformers (–º–æ–¥–µ–ª—å BERT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
2Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (positive, negative, neutral)
3Ô∏è‚É£ –ó–∞–º–µ–Ω–∏–º TextBlob –Ω–∞ –º–æ—â–Ω—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å

1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
üìå –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º transformers –∏ torch

bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
pip install transformers torch
üìå –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from transformers import pipeline
2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é BERT-–º–æ–¥–µ–ª—å

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
sentiment_model = pipeline("sentiment-analysis")
üìå –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã BERT

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
text1 = "Bitcoin crashes! Investors panic!"
text2 = "Ethereum price is stable today."
text3 = "Massive BTC pump! New all-time high!"

print(sentiment_model(text1))
print(sentiment_model(text2))
print(sentiment_model(text3))
üìå –í—ã–≤–æ–¥ –±—É–¥–µ—Ç —Ç–∞–∫–∏–º:

json
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
[{'label': 'NEGATIVE', 'score': 0.998}]
[{'label': 'NEUTRAL', 'score': 0.725}]
[{'label': 'POSITIVE', 'score': 0.985}]
3Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –∞–Ω–∞–ª–∏–∑—É Twitter, Telegram, RSS
–¢–µ–ø–µ—Ä—å, –≤–º–µ—Å—Ç–æ TextBlob, –º—ã –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

üìå –ü—Ä–∏–º–µ—Ä —Å Twitter

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import tweepy
from transformers import pipeline

# Twitter API Key
BEARER_TOKEN = "your_twitter_bearer_token"
client = tweepy.Client(bearer_token=BEARER_TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º BERT-–º–æ–¥–µ–ª—å
sentiment_model = pipeline("sentiment-analysis")

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–≤–∏—Ç—ã –ø—Ä–æ BTC
query = "(BTC OR Bitcoin OR Ethereum OR ETH) -is:retweet"
tweets = client.search_recent_tweets(query=query, max_results=5)

for tweet in tweets.data:
    sentiment = sentiment_model(tweet.text)[0]
    print(f"Tweet: {tweet.text}")
    print(f"Sentiment: {sentiment['label']} (score: {sentiment['score']:.2f})")
    print("-" * 50)
4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Kafka
–¢–µ–ø–µ—Ä—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Kafka, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–∞–ª—å—à–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è BI –∏–ª–∏ –∞–ª–µ—Ä—Ç–æ–≤).

üìå Kafka Producer —Å BERT

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from kafka import KafkaProducer
import json

producer = KafkaProducer(bootstrap_servers="localhost:9092", value_serializer=lambda v: json.dumps(v).encode("utf-8"))

for tweet in tweets.data:
    sentiment = sentiment_model(tweet.text)[0]
    
    data = {
        "source": "Twitter",
        "text": tweet.text,
        "sentiment": sentiment["label"],
        "score": round(sentiment["score"], 2)
    }
    
    producer.send("crypto_sentiment", data)
    print(f"Sent to Kafka: {data}")
5Ô∏è‚É£ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ Grafana
–¢–µ–ø–µ—Ä—å —Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏:

–°—Ä–µ–¥–Ω–∏–π Sentiment Score –ø–æ BTC, ETH, SOL
–î–æ–ª—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö / –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
–ì—Ä–∞—Ñ–∏–∫ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞ 24 —á–∞—Å–∞
üìå Prometheus –º–µ—Ç—Ä–∏–∫–∏

python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
from prometheus_client import Gauge, start_http_server

btc_sentiment = Gauge("btc_sentiment", "Sentiment score for BTC")
eth_sentiment = Gauge("eth_sentiment", "Sentiment score for ETH")

start_http_server(8000)

btc_sentiment.set(0.85)  # –ü—Ä–∏–º–µ—Ä: –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥
eth_sentiment.set(-0.3)  # –ü—Ä–∏–º–µ—Ä: –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç—Ä–µ–Ω–¥
üìå Grafana Dashboard

–ò—Å—Ç–æ—á–Ω–∏–∫: Prometheus
–ü–∞–Ω–µ–ª–∏: –õ–∏–Ω–µ–π–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ sentiment score
–ê–ª–µ—Ä—Ç—ã: –ï—Å–ª–∏ BTC sentiment < -0.5 ‚Üí Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ
üìå –ò—Ç–æ–≥
üöÄ –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å —Ä–µ–∞–ª—å–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è Twitter, Telegram, RSS!
üìä –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ Kafka ‚Üí –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ‚Üí –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –≤ ClickHouse, PostgreSQL ‚Üí –ú–æ–Ω–∏—Ç–æ—Ä—è—Ç—Å—è –≤ Grafana

üìå –ß—Ç–æ –¥–∞–ª—å—à–µ? ‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤ (CoinGecko API)?
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é ML?

üî• –≠—Ç–æ—Ç ETL ‚Äî —É–∂–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–∫—à–Ω-–ø—Ä–æ–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞!